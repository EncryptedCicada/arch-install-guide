#Install ArchLinux with btrfs and subvolumes without encryption
#Created by EncryptedCicada on 26 Jun 2021
#Info adapted from Arch Wiki and various other sources

DRIVE=/dev/nvme0n1

#Wipe disk
sgdisk --zap-all $DRIVE

#Create partitions
sgdisk --clear --new=1:0:+550MiB --typecode=1:ef00 --change-name=1:EFI --new=2:0:+16GiB --typecode=2:8200 --change-name=2:swap --new=3:0:0 --typecode=3:8300 --change-name=3:system $DRIVE

#View and verify the partion table
lsblk -o +PARTLABEL

#Format EFI Partition
mkfs.fat -F32 -n EFI /dev/disk/by-partlabel/EFI

#Make and enable swap
mkswap -L swap /dev/disk/by-partlabel/swap
swapon -L swap

#Format system partition as btrfs and create subvolumes
mkfs.btrfs --force --label system /dev/disk/by-partlabel/system
o=defaults
o_btrfs=$o,compress=zstd,ssd,noatime,nodiratime
mount -t btrfs LABEL=system /mnt
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@var
btrfs subvolume create /mnt/@snapshots
umount -R /mnt
mount -o subvol=@,$o_btrfs LABEL=system /mnt
mkdir /mnt/{boot,home,var,.snapshots}
mount -o subvol=@home,$o_btrfs LABEL=system /mnt/home
mount -o subvol=@var,$o_btrfs LABEL=system /mnt/var
mount -o subvol=@snapshots,$o_btrfs LABEL=system /mnt/.snapshots

#Mount boot partition
mount LABEL=EFI /mnt/boot

#Install base system
pacstrap /mnt base linux linux-firmware linux-headers btrfs-progs wpa_supplicant networkmanager mkinitcpio neovim sudo nano git base-devel

#Generate fstab
genfstab -L -p /mnt >> /mnt/etc/fstab
#Check fstab
cat /mnt/etc/fstab
NOTE:Keep the root partition's UUID mentioned in fstab handy to be able to plug them in when adding loaders for systemd-boot
NOTE-1:The above note is now redundant as I've added an easier way to setup the loader later in the guide. It will stay to keep the user informed of the information in case something goes wrong.)

#Chroot into installed system
arch-chroot /mnt /bin/bash


#THE FOLLOWING COMMANDS ARE RUN IN CHROOT!!!

#Timezone and clock
ln -s /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
hwclock --systohc

#Edit /etc/locale.gen and uncomment en_IN, en_GB.UTF8 and other needed locales (My locales are India specific and fallback locale is UK Eng, please google your own locales). Generate the locales by running:
locale-gen

#Create the locale.conf (/etc/locale.conf) file, and set the LANG variable accordingly:
LANG=en_IN.UTF-8
LANGUAGE=en_IN:en_GB:en
LC_TIME=en_IN.UTF-8

#Set hostname and setup /etc/hosts file
echo MechyMamba > /etc/hostname
nano /etc/hosts
******START OF /etc/hosts FILE******
127.0.0.1       localhost
::1             localhost
127.0.1.1       MechyMamba.localhost  MechyMamba
******END OF FILE******

#Enable network connection
systemctl enable NetworkManager

#Enable ntp client
systemctl enable systemd-timesyncd

#Setup root passwd (Process to disable root password at near the EOF)
NOTE: Some people including me can skip this step if they don't want to setup a password for root account. Some distros like Ubuntu do this by default to prevent newbies from breaking the system and to prevent root exploits. This guide still covers steps to provide elevated privilege to the standard user using sudo.
passwd

#Add user
useradd -m -G wheel cicada
passwd cicada

#Edit the sudoers file to give access to added user for elevated previlidges (uncomment # %wheel ALL=(ALL) ALL)
EDITOR=nano visudo

******PART OF FILE TO BE EDITED******
%wheel ALL=(ALL) ALL
******Save the file******

#Install other necessary packages
pacman -S pipewire pipewire-alsa pipewire-pulse cups ttf-liberation noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra bash-completion amd-ucode curl wget

#Enable CUPS socket detection
systemctl enable cups.socket

#Install WM/DM of choice
pacman -S gnome
#Install graphics drivers
pacman -S mesa vulkan-radeon xf86-video-amdgpu libva-mesa-driver mesa-vdpau

#OPTIONAL(If you're installing a full-blown desktop environment like Gnome, sometimes GDM doesn't start automatically. For amdgpu users this is the fix)
nano /etc/mkinitcpio.conf
#Edit the line that says MODULES=() and add the following in the beginning just after the bracket:
amdgpu
#The edited line shound look somethng like this:
MODULES=(amdgpu ...)

#Edit the mkinitcpio.conf file like earlier and add btrfs to the HOOKS=(...)
HOOKS=(... btrfs filesystems ...)
#Generate
mkinitcpio -p linux

#Installing systemd-boot bootloader
bootctl --path=/boot install

#Configuring loader
nano /boot/loader/loader.conf
**Add the following lines to the file(excluding asterisks. It defines the EOF)
default archlinux.conf
editor no
auto-entries 1
auto-firmware 1
console-mode max
**
TIP:A basic loader configuration file is located at /usr/share/systemd/bootctl/loader.conf

#Adding loaders
cd /boot/loader/entries
#This will create 2 files: archlinux.conf and archlinux-fallback.conf
touch archlinux.conf archlinux-fallback.conf
nano archlinux.conf
**Add the following lines to the file(excluding asterisks. It defines the EOF)
# Created by EncryptedCicada
title Arch Linux
linux /vmlinuz-linux
initrd /amd-ucode.img
initrd /initramfs-linux.img
options root="LABEL=system" rw rootflags=subvol=/@ quiet splash loglevel=3 rd.systemd.show_status=auto rd.udev.log_priority=3 vt.global_cursor_default=0
**

nano archlinux-fallback.conf
**Add the following lines to the file(excluding asterisks. It defines the EOF)
# Created by EncryptedCicada
title Arch Linux (fallback initramfs)
linux /vmlinuz-linux
initrd /amd-ucode.img
initrd /initramfs-linux-fallback.img
options root="LABEL=system" rw rootflags=subvol=/@ quiet splash loglevel=3 rd.systemd.show_status=auto rd.udev.log_priority=3 vt.global_cursor_default=0
**
TIP:An example entry file is located at /usr/share/systemd/bootctl/arch.conf

#For quiet boot add the following to the options line in the loader after 'rw'
quiet splash loglevel=3 rd.systemd.show_status=auto rd.udev.log_priority=3
#The line could also look something like this:
options root="LABEL=system" rw quiet splash loglevel=3 rd.systemd.show_status=auto rd.udev.log_priority=3 vt.global_cursor_default=0

#More on updating systemd-boot when systemd gets updated towards the EOF

#To exit chroot, type: (optionally do ctrl+d)
exit

#Unmount all partitions with
umount -R /mnt

#To reboot into the newly installed system type:
reboot
#Remember to remove the installation medium and then login into the new system with the root account.

#For people who wish to disable password for root account just follow this step:
sudo usermod -p '!' root
#this sets root to have a disabled password

#To enable updating systemd-boot when systemd gets updated with a pacman hook install the package systemd-boot-pacman-hook from the AUR
#include <post-install>
